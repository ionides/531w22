abline(v=spec$freq[which.max(spec$spec)], lty="dotted")
abline(v=spec$freq[which.max(spec$spec[100:500])+98], lty="dotted")
spec$freq[which.max(spec$spec)]
1/spec$freq[which.max(spec$spec[100:500])+98]
acf(omicron$Cases)
spec = spectrum(omicron$Cases,method = "ar")
abline(v=spec$freq[which.max(spec$spec)], lty="dotted")
abline(v=spec$freq[which.max(spec$spec[100:500])+98], lty="dotted")
spec$freq[which.max(spec$spec)]
1/spec$freq[which.max(spec$spec[100:500])+98]
data = df
date = rep(NA, 77)
for(i in 1:767){data$Date[i] = substr(data$Date[i],1,10)}
case = ts(data$Cases, start = c(2020,3,1), frequency = 365)
case_diff = diff(case)
adf.test(case_diff)
aic_table <- function(data,P,Q){
table <- matrix(NA,(P+1),(Q+1))
for(p in 0:P) {
for(q in 0:Q) {
table[p+1,q+1] <- arima(data,order=c(p,1,q), method="ML")$aic
}
}
dimnames(table) <- list(paste("AR",0:P, sep=""),paste("MA",0:Q,sep=""))
table
}
cnt_aic_table <- aic_table(case,5,5)
knitr::kable(cnt_aic_table,digits=3, caption = 'AIC table')
fit = arima(case,order=c(5,1,5), method="ML")
plot(case, type='l')
lines(fitted(fit),col = 'red')
legend("topright", inset=.05, c("original data","fitted data"),lty=c(1, 1),
col=c("black", "red"))
par(mfrow=c(1,2))
acf(fit$residuals, main = "Residuals Autocorrelation")
qqnorm(fit$residuals, main = "QQ-Plot: Residuals")
qqline(fit$residuals)
cnt_aic_table <- aic_table(omicron$Cases,5,5)
knitr::kable(cnt_aic_table,digits=3, caption = 'AIC table')
data = df
date = rep(NA, 77)
for(i in 1:767){data$Date[i] = substr(data$Date[i],1,10)}
case = ts(data$Cases, start = c(2020,3,1), frequency = 365)
case_diff = diff(case)
adf.test(case_diff)
aic_table <- function(data,P,Q){
table <- matrix(NA,(P+1),(Q+1))
for(p in 0:P) {
for(q in 0:Q) {
table[p+1,q+1] <- arima(data,order=c(p,1,q), method="ML")$aic
}
}
dimnames(table) <- list(paste("AR",0:P, sep=""),paste("MA",0:Q,sep=""))
table
}
cnt_aic_table <- aic_table(case,5,5)
knitr::kable(cnt_aic_table,digits=3, caption = 'AIC table')
aic_table <- function(data,P,Q){
table <- matrix(NA,(P+1),(Q+1))
for(p in 0:P) {
for(q in 0:Q) {
table[p+1,q+1] <- arima(data,order=c(p,1,q), method="ML")$aic
}
}
dimnames(table) <- list(paste("AR",0:P, sep=""),paste("MA",0:Q,sep=""))
table
}
cnt_aic_table <- aic_table(case,5,5)
knitr::kable(cnt_aic_table,digits=3, caption = 'AIC table All Michigan COVID Data')
#library(tidyverse)
#library(knitr)
library(ggplot2)
library(tidyr)
library(dplyr)
library(pomp)
library(cowplot)
library(tseries)
library(tidyverse)
library(mFilter)
library(forecast)
library(tidyverse)
library(readxl)
library(lubridate)
library(pomp)
library(doParallel)
library(doRNG)
registerDoRNG(11111)
stopifnot(getRversion() >= "4.0")
stopifnot(packageVersion("pomp")>="3.0")
set.seed(1350254336)
df <- read.csv("michigan_covid_clean_noNA.csv")
df$Date = as.Date(df$Date)
fit = arima(case,order=c(5,1,5), method="ML")
plot(case, type='l')
lines(fitted(fit),col = 'red')
legend("topright", inset=.05, c("original data","fitted data"),lty=c(1, 1),
col=c("black", "red"))
title(main = "Michigan COVID-19 Cases and fitted ARIMA(5,1,5) Model")
cnt_aic_table <- aic_table(omicron$Cases,5,5)
knitr::kable(cnt_aic_table,digits=3, caption = 'AIC table')
fit = arima(omicron$Cases,order=c(5,1,5), method="ML")
plot(omicron$Cases, type='l')
lines(fitted(fit),col = 'red')
legend("topright", inset=.05, c("original data","fitted data"),lty=c(1, 1),
col=c("black", "red"))
fit = arima(omicron$Cases,order=c(5,1,5), method="ML")
plot(omicron$Cases, type='l')
lines(fitted(fit),col = 'red')
legend("topright", inset=.05, c("original data","fitted data"),lty=c(1, 1),
col=c("black", "red"))
title(main = "Michigan COVID-19 Cases and fitted ARIMA(5,1,5) Model")
fit = arima(omicron$Cases,order=c(5,1,5), method="ML")
plot(omicron$Cases, type='l')
lines(fitted(fit),col = 'red')
legend("topright", inset=.05, c("original data","fitted data"),lty=c(1, 1),
col=c("black", "red"))
title(main = "Michigan COVID-19 Omicron Cases and fitted ARIMA(5,1,5) Model")
labels(x = "Days since December 1st, 2021", y = "Confirmed Cases", legend = "Data Source")
fit = arima(omicron$Cases,order=c(5,1,5), method="ML")
plot(omicron$Cases, type='l')
lines(fitted(fit),col = 'red')
legend("topright", inset=.05, c("original data","fitted data"),lty=c(1, 1),
col=c("black", "red"))
title(main = "Michigan COVID-19 Omicron Cases and fitted ARIMA(5,1,5) Model")
label(x = "Days since December 1st, 2021", y = "Confirmed Cases", legend = "Data Source")
fit = arima(omicron$Cases,order=c(5,1,5), method="ML")
plot(omicron$Cases, type='l')
lines(fitted(fit),col = 'red')
legend("topright", inset=.05, c("original data","fitted data"),lty=c(1, 1),
col=c("black", "red"))
title(main = "Michigan COVID-19 Omicron Cases and fitted ARIMA(5,1,5) Model",
xlab = "Days since December 1st, 2021",
ylab = "Confirmed Cases",
legend = "Data Source")
fit = arima(omicron$Cases,order=c(5,1,5), method="ML")
plot(omicron$Cases, type='l',main = "Michigan COVID-19 Omicron Cases and fitted ARIMA(5,1,5) Model",
xlab = "Days since December 1st, 2021",
ylab = "Confirmed Cases",
legend = "Data Source")
lines(fitted(fit),col = 'red')
legend("topright", inset=.05, c("original data","fitted data"),lty=c(1, 1),
col=c("black", "red"))
fit = arima(case,order=c(5,1,5), method="ML")
plot(case, type='l',main = "Michigan COVID-19 Omicron Cases and fitted ARIMA(5,1,5) Model",
xlab = "Days since December 1st, 2021",
ylab = "Confirmed Cases")
lines(fitted(fit),col = 'red')
legend("topright", inset=.05, c("Original data","Fitted data"),lty=c(1, 1),
col=c("black", "red"))
par(mfrow=c(1,2))
acf(fit$residuals, main = "Residuals Autocorrelation")
qqnorm(fit$residuals, main = "QQ-Plot: Residuals")
qqline(fit$residuals)
df <- read_excel("Data.xlsx")
#df <- read.csv("michigan_covid_clean_noNA.csv")
df %>% filter(CASE_STATUS == "Confirmed") %>% group_by(Date) %>% summarise(Cases = sum(Cases), Deaths = sum(Deaths), CumulativeCases = sum(Cases.Cumulative), CumulativeDeaths = sum(Deaths.Cumulative)) %>% drop_na() -> data
cases = data %>% select(-CumulativeCases, -CumulativeDeaths, -Deaths) %>% filter(Date > as.Date("2021-12-01")) %>% mutate(Time = 1:n())
df <- read_excel("Data.xlsx")
#df <- read.csv("michigan_covid_clean_noNA.csv")
df %>% filter(CASE_STATUS == "Confirmed") %>% group_by(Date) %>% summarise(Cases = sum(Cases), Deaths = sum(Deaths), CumulativeCases = sum(Cases.Cumulative), CumulativeDeaths = sum(Deaths.Cumulative)) %>% drop_na() -> data
cases = data %>% select(-CumulativeCases, -CumulativeDeaths, -Deaths) %>% filter(Date > as.Date("2021-12-01")) %>% mutate(Time = 1:n())
seir_step <- Csnippet("
double Beta = beta0;
if(t>33) {
Beta = beta1;
}
double dN_SE = rbinom(S,1-exp(-Beta*I/N*dt));
double dN_EI = rbinom(E,1-exp(-mu_EI*dt));
double dN_IR = rbinom(I,1-exp(-mu_IR*dt));
S -= dN_SE;
E += dN_SE - dN_EI;
I += dN_EI - dN_IR;
R += dN_IR;
H += dN_IR;
")
seir_rinit <- Csnippet("
S = nearbyint(eta*N);
E = 30000;
I = 15000;
R = nearbyint((1-eta)*N);
H = 0;
")
seir_dmeas <- Csnippet("
double tol=1.0e-25;
double mean = rho*H;
double sd = sqrt(pow(psi * H,2)+rho*H);
if(Cases>0.0){
lik=pnorm(Cases+0.5,mean,sd,1,0)-pnorm(Cases-0.5,mean,sd,1,0)+tol;
} else {
lik=pnorm(Cases+0.5,mean,sd,1,0)+tol;
}
if(give_log) lik=log(lik);
")
seir_rmeas <- Csnippet("
Cases = rnorm(rho * H, sqrt(pow(psi * rho * H,2) + rho * (1-rho) * H));
if (Cases < 0) {
Cases = 0;
}
Cases = nearbyint(Cases);
")
covidSEIR = cases %>% select(Time, Cases) %>%
pomp(
times = "Time", t0 = 0,
rprocess = euler(seir_step, delta.t = 1), # delta.t set to 1 day
rinit = seir_rinit,
rmeasure = seir_rmeas,
dmeasure = seir_dmeas,
accumvars = "H",
partrans=parameter_trans(
log = c("mu_EI", "mu_IR", "beta0", "beta1", "psi"),
logit = c("rho", "eta")
),
statenames = c("S", "E", "I", "R", "H"),
paramnames = c("mu_EI", "mu_IR",
"eta", "rho", "N", "beta0", "beta1", "psi")
)
set.seed(100)
population = 9.987e6
params = c(beta0=0.7, beta1=0.25, mu_EI = 0.33, mu_IR = 0.14, rho = 0.5, eta = 0.4, psi = 0.15, N = population)
fixed_params = params[c("N", "mu_EI", "mu_IR")]
params_rw.sd = rw.sd(rho = 0.02, eta = ivp(0.02), psi = 0.01, beta0 = 0.05,
beta1 = 0.015)
covidSEIR %>%
simulate(params=params,
nsim=10,format="data.frame",include.data=TRUE) %>%
ggplot(aes(x=Time,y=Cases,group=.id,color=.id=="data"))+
geom_line()+
guides(color=FALSE) + ggtitle("Initial Simulation Results ")
covidSEIR %>%
pfilter(Np=1000,params=params) -> pf
plot(pf, main= "Particle Filter Check")
bake(file = "writeup_lik_starting_values.rds", {
foreach(i=1:10, .combine = c) %dopar% {
library(pomp)
covidSEIR %>% pfilter(params=params,  Np=1000)
}
}) -> pf
pf %>% logLik() %>% logmeanexp(se = TRUE)
run_id = 1
bake(file = "local_search.rds", {
foreach(i = 1:20, .combine = c) %dopar% {
suppressPackageStartupMessages({
library(tidyverse)
library(pomp)
})
covidSEIR %>%
mif2(
params = params,
Np = 1000, Nmif = 50,
cooling.fraction.50 = 0.5,
rw.sd = params_rw.sd
)
} -> mifs_local
attr(mifs_local,"ncpu") <- getDoParWorkers()
mifs_local
}) -> mifs_local
mifs_local %>%
traces() %>%
melt() %>%
ggplot(aes(x = iteration, y = value, group = L1, color = factor(L1))) +
geom_line() +
guides(color = FALSE) +
facet_wrap(~variable, scales = "free_y")
bake(file = "lik_local.rds", {
foreach(mf=mifs_local,.combine=rbind) %dopar% {
library(pomp)
library(tidyverse)
evals <- replicate(10, logLik(pfilter(mf,Np=1000)))
ll <- logmeanexp(evals,se=TRUE)
mf %>% coef() %>% bind_rows() %>%
bind_cols(loglik=ll[1],loglik.se=ll[2])
} -> results
}) -> results
results %>% arrange(-loglik) %>% head %>%
knitr::kable(digits = 3, caption = "Local search results (in decreasing order of likelihood)")
set.seed(2062379496)
runif_design(
lower=c(beta0=0.4,beta1=0.15,rho=0.8,eta=0.3,psi=0.5),
upper=c(beta0=0.6,beta1=0.3,rho=1,eta=0.5,psi=0.95),
nseq=400
) -> guesses
mf1 <- mifs_local[[1]]
bake(file="global_search_.rds",{
registerDoRNG(11111)
m3<-foreach(guess=iter(guesses,"row"), .combine=rbind) %dopar% {
library(pomp)
library(tidyverse)
mf1 %>%
mif2(params=c(unlist(guess),fixed_params)) %>%
mif2(Nmif=50) -> mf2
replicate(
10,
mf2 %>% pfilter(Np=1000) %>% logLik()
) %>%
logmeanexp(se=TRUE) -> ll
mf2 %>% coef() %>% bind_rows() %>%
bind_cols(loglik=ll[1],loglik.se=ll[2])
} -> results
}) %>%
filter(is.finite(loglik)) -> results
results %>% arrange(-loglik) %>% head %>%
knitr::kable(digits = 3, caption = "Global search results (in decreasing order of likelihood)")
bind_rows(results) %>%
filter(is.finite(loglik)) %>%
arrange(-loglik) %>%
write_csv("new_global2.csv")
read_csv("new_global2.csv") %>%
filter(loglik>max(loglik)-100000) %>%
bind_rows(guesses) %>%
mutate(type=if_else(is.na(loglik),"guess","result")) %>%
arrange(type) -> all
pairs(~loglik+beta0+beta1+mu_IR+mu_EI+eta+psi+rho, data=all,
col=ifelse(all$type=="guess",grey(0.5),"red"),pch=16)
plot(mf1)
setwd("~/STATS 531/matthew pomp")
#library(tidyverse)
#library(knitr)
library(ggplot2)
library(tidyr)
library(dplyr)
library(pomp)
library(cowplot)
library(tseries)
library(tidyverse)
library(mFilter)
library(forecast)
library(tidyverse)
library(readxl)
library(lubridate)
library(pomp)
library(doParallel)
library(doRNG)
registerDoRNG(11111)
stopifnot(getRversion() >= "4.0")
stopifnot(packageVersion("pomp")>="3.0")
set.seed(1350254336)
df <- read.csv("michigan_covid_clean_noNA.csv")
df$Date = as.Date(df$Date)
seir_step <- Csnippet("
double Beta = beta0;
if(t>33) {
Beta = beta1;
}
double dN_SE = rbinom(S,1-exp(-Beta*I/N*dt));
double dN_EI = rbinom(E,1-exp(-mu_EI*dt));
double dN_IR = rbinom(I,1-exp(-mu_IR*dt));
S -= dN_SE;
E += dN_SE - dN_EI;
I += dN_EI - dN_IR;
R += dN_IR;
H += dN_IR;
")
seir_rinit <- Csnippet("
S = nearbyint(eta*N);
E = 30000;
I = 15000;
R = nearbyint((1-eta)*N);
H = 0;
")
seir_dmeas <- Csnippet("
double tol=1.0e-25;
double mean = rho*H;
double sd = sqrt(pow(psi * H,2)+rho*H);
if(Cases>0.0){
lik=pnorm(Cases+0.5,mean,sd,1,0)-pnorm(Cases-0.5,mean,sd,1,0)+tol;
} else {
lik=pnorm(Cases+0.5,mean,sd,1,0)+tol;
}
if(give_log) lik=log(lik);
")
seir_rmeas <- Csnippet("
Cases = rnorm(rho * H, sqrt(pow(psi * rho * H,2) + rho * (1-rho) * H));
if (Cases < 0) {
Cases = 0;
}
Cases = nearbyint(Cases);
")
covidSEIR = cases %>% select(Time, Cases) %>%
pomp(
times = "Time", t0 = 0,
rprocess = euler(seir_step, delta.t = 1), # delta.t set to 1 day
rinit = seir_rinit,
rmeasure = seir_rmeas,
dmeasure = seir_dmeas,
accumvars = "H",
partrans=parameter_trans(
log = c("mu_EI", "mu_IR", "beta0", "beta1", "psi"),
logit = c("rho", "eta")
),
statenames = c("S", "E", "I", "R", "H"),
paramnames = c("mu_EI", "mu_IR",
"eta", "rho", "N", "beta0", "beta1", "psi")
)
set.seed(100)
population = 9.987e6
params = c(beta0=0.7, beta1=0.25, mu_EI = 0.33, mu_IR = 0.14, rho = 0.5, eta = 0.4, psi = 0.15, N = population)
fixed_params = params[c("N", "mu_EI", "mu_IR")]
params_rw.sd = rw.sd(rho = 0.02, eta = ivp(0.02), psi = 0.01, beta0 = 0.05,
beta1 = 0.015)
covidSEIR %>%
simulate(params=params,
nsim=10,format="data.frame",include.data=TRUE) %>%
ggplot(aes(x=Time,y=Cases,group=.id,color=.id=="data"))+
geom_line()+
guides(color="none") + ggtitle("Initial Simulation Results ")
set.seed(100)
population = 9.987e6
params = c(beta0=0.7, beta1=0.25, mu_EI = 0.33, mu_IR = 0.14, rho = 0.5, eta = 0.4, psi = 0.15, N = population)
fixed_params = params[c("N", "mu_EI", "mu_IR")]
params_rw.sd = rw.sd(rho = 0.02, eta = ivp(0.02), psi = 0.01, beta0 = 0.05,
beta1 = 0.015)
covidSEIR %>%
simulate(params=params,
nsim=10,format="data.frame",include.data=TRUE) %>%
ggplot(aes(x=Time,y=Cases,group=.id,color=.id=="data"))+
geom_line()+
guides(color="none") + ggtitle("Initial Simulation Results ") +
theme_bw()
covidSEIR %>%
pfilter(Np=1000,params=params) -> pf
plot(pf, main= "Particle Filter Check")
bake(file = "writeup_lik_starting_values.rds", {
foreach(i=1:10, .combine = c) %dopar% {
library(pomp)
covidSEIR %>% pfilter(params=params,  Np=1000)
}
}) -> pf
pf %>% logLik() %>% logmeanexp(se = TRUE)
run_id = 1
bake(file = "local_search.rds", {
foreach(i = 1:20, .combine = c) %dopar% {
suppressPackageStartupMessages({
library(tidyverse)
library(pomp)
})
covidSEIR %>%
mif2(
params = params,
Np = 1000, Nmif = 50,
cooling.fraction.50 = 0.5,
rw.sd = params_rw.sd
)
} -> mifs_local
attr(mifs_local,"ncpu") <- getDoParWorkers()
mifs_local
}) -> mifs_local
mifs_local %>%
traces() %>%
melt() %>%
ggplot(aes(x = iteration, y = value, group = L1, color = factor(L1))) +
geom_line() +
guides(color = "none") +
facet_wrap(~variable, scales = "free_y")
bake(file = "lik_local.rds", {
foreach(mf=mifs_local,.combine=rbind) %dopar% {
library(pomp)
library(tidyverse)
evals <- replicate(10, logLik(pfilter(mf,Np=1000)))
ll <- logmeanexp(evals,se=TRUE)
mf %>% coef() %>% bind_rows() %>%
bind_cols(loglik=ll[1],loglik.se=ll[2])
} -> results
}) -> results
results %>% arrange(-loglik) %>% head %>%
knitr::kable(digits = 3, caption = "Local search results (in decreasing order of likelihood)")
runif_design(
lower=c(beta0=0.4,beta1=0.15,rho=0.8,eta=0.3,psi=0.5),
upper=c(beta0=0.6,beta1=0.3,rho=1,eta=0.5,psi=0.95),
nseq=400
) -> guesses
mf1 <- mifs_local[[1]]
bake(file="global_search_.rds",{
registerDoRNG(11111)
m3<-foreach(guess=iter(guesses,"row"), .combine=rbind) %dopar% {
library(pomp)
library(tidyverse)
mf1 %>%
mif2(params=c(unlist(guess),fixed_params)) %>%
mif2(Nmif=50) -> mf2
replicate(
10,
mf2 %>% pfilter(Np=1000) %>% logLik()
) %>%
logmeanexp(se=TRUE) -> ll
mf2 %>% coef() %>% bind_rows() %>%
bind_cols(loglik=ll[1],loglik.se=ll[2])
} -> results
}) %>%
filter(is.finite(loglik)) -> results
results %>% arrange(-loglik) %>% select(-N, -mu_EI, -mu_IR) %>% head %>%
knitr::kable(digits = 3, caption = "Global search results (in decreasing order of likelihood)")
results %>% arrange(-loglik) %>% select(-N, -mu_EI, -mu_IR) %>% head %>%
knitr::kable(digits = 3, caption = "Table 4: Global search results, in order of decreasing  likelihood")
params = c(beta0=0.582, beta1=0.313, mu_EI = 0.33, mu_IR = 0.14, rho = 0.995, eta = 0.302, psi = 0.643, N = population)
covidSEIR %>%
simulate(params=params,
nsim=10,format="data.frame",include.data=TRUE) %>%
ggplot(aes(x=Time,y=Cases,group=.id,color=.id=="data"))+
geom_line()+
guides(color="none") + ggtitle("Final Simulation Results ")
bind_rows(results) %>%
filter(is.finite(loglik)) %>%
arrange(-loglik) %>%
write_csv("new_global2.csv")
read_csv("new_global2.csv") %>%
filter(loglik>max(loglik)-100000) %>%
bind_rows(guesses) %>%
mutate(type=if_else(is.na(loglik),"guess","result")) %>%
arrange(type) -> all
pairs(~loglik+beta0+beta1+eta+psi+rho, data=all,
col=ifelse(all$type=="guess",grey(0.5),"red"),pch=16)
rm(list=ls())
