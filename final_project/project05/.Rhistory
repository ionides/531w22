stat_qq() + stat_qq_line() +
labs(x = "Theoretical Quantiles", y = "Sample Quantiles",
title = graph_title)
return(graph)
}
Last_Pull <- as_date("2022-4-15")  # Date we last pulled the data
NYT_Covid_Case_Data_CSV <- "https://raw.githubusercontent.com/nytimes/covid-19-data/master/us.csv"
#Last Data Pull April 15 2022. Code for data pull given below
NYT_Covid_Case_Data <- read_csv(file = NYT_Covid_Case_Data_CSV,
col_types = cols(
date  = col_date(format = "%Y-%m-%d"),
cases = col_double(),
deaths = col_double())) %>%
dplyr::filter(date <Last_Pull)
# We graph the data
NYT_Covid_Case_Data %>% ggplot() +
geom_line(aes(date,cases), color = "red") +
scale_x_date(breaks = scales::breaks_pretty(10)) +
labs(title = "COVID-19 Cases in US",x=NULL,y= "Cases")
NYT_Covid_Case_Data %>% ggplot() +
geom_line(aes(date,deaths), color = "black") +
scale_x_date(breaks = scales::breaks_pretty(10)) +
labs(title = "COVID-19 Deaths in US", x=NULL, y= "Deaths")
#Our graphs indicate that the data is of cumulative cases and death counts
#So we convert these values into daily by using lag
NYT_Covid_Case_Data %>% mutate(daily_cases = cases- dplyr::lag(cases,1),
daily_deaths = deaths - dplyr::lag(deaths),
change_daily_cases = daily_cases - dplyr::lag(daily_cases,1),
cumulative_cases = cases, #rename cases
cumulative_deaths = deaths) %>% #rename deats
dplyr::select(-deaths,-cases) %>%
dplyr::filter(date < Last_Pull # For consistency when debugging
)-> NYT_Covid_Case_Data # Drop old variables
#Graph the data again
NYT_Covid_Case_Data %>% ggplot() +
geom_line(aes(date,daily_cases, color = "Daily Cases")) +
geom_line(aes(date,daily_deaths, color = "Daily Deaths")) +
scale_color_manual(values = c("Daily Cases" ="Red", "Daily Deaths" = "Black")) +
scale_y_log10() +
scale_x_date(breaks = scales::breaks_pretty(10)) +
labs(title ="Covid-19 Daily Cases and Deaths (Log-10 Scale)",
x = NULL, y = "Daily Count")
min_date_NYT <- min(NYT_Covid_Case_Data$date)
n_data_NYT <- nrow(NYT_Covid_Case_Data)
write_csv(NYT_Covid_Case_Data,file = "NYT_Covid_Data_2022_April_15.csv",col_names = T)
#We save the results since the data is updated daily and we need to stop after a point to stabilize our results
#https://www.reuters.com/article/us-health-coronavirus-usa/all-american-adults-to-be-eligible-for-covid-19-vaccine-by-april-19-biden-idUSKBN2BT1IF
# The article indicates that all americans were elligible for vaccines starting April 19 2021
#So we filter based on those dates
Vaccine_start_date <- as_date("2021-4-19") #2021 April 19
NYT_Covid_Case_Data_filtered <- NYT_Covid_Case_Data %>%
dplyr::filter(date >=Vaccine_start_date) #Filter after vaccines became available for all
#Note: The data was last pulled on 2022 April 15
CDC_Vaccine_Data_by_State <- read_csv(file = "COVID-19_Vaccinations_in_the_United_States_Jurisdiction.csv",
col_types = cols(Date  = col_date(format = "%m/%d/%Y")))
names(CDC_Vaccine_Data_by_State)[1] <- "date" #prevent problems with Date as function and var name
#Data is divided by state so
CDC_Vaccine_Data_by_State  %>% group_by(date) %>%
summarize(Doses_Administered = sum(Administered),
Complete_Vaccination = sum(Series_Complete_Yes)) -> CDC_Vaccine_Data
CDC_Vaccine_Data %>% ggplot() +
geom_line(aes(date,Doses_Administered, color = "Doses")) +
geom_line(aes(date,Complete_Vaccination, color = "Complete Vaccinated")) +
scale_color_manual(values = c("Doses" = "Black","Complete Vaccinated" = "red"))
#It appears to be the data is cumulative once again,
#so we divide them into cumulative and daily
CDC_Vaccine_Data %>%
transmute(date = date,
cumulative_doses_administered = Doses_Administered,
daily_doses_administered = Doses_Administered-dplyr::lag(Doses_Administered,1),
cumulative_complete_vaccination = Complete_Vaccination,
daily_complete_vaccination = Complete_Vaccination-dplyr::lag(Complete_Vaccination,1)
) -> CDC_Vaccine_Data
min_date_CDC <- min(CDC_Vaccine_Data$date)
n_data_CDC <- nrow(CDC_Vaccine_Data)
CDC_Vaccine_Data %>%
dplyr::filter(date >= Vaccine_start_date) %>% #Data Vaccines become available for all
dplyr::filter(date < Last_Pull) -> CDC_Vaccine_Data_filtered #Date of last pull
#Combine the two datasets
Covid_data2021_2022 <- NYT_Covid_Case_Data_filtered %>%
left_join(CDC_Vaccine_Data_filtered,by = "date")
#Save the data and summary statistics for faster use in the future
save(Covid_data2021_2022,
min_date_CDC,min_date_NYT,
NYT_Covid_Case_Data,
CDC_Vaccine_Data,
n_data_CDC, n_data_NYT,
Vaccine_start_date,Last_Pull,
file = "Data.Rdata")
load("Data.Rdata")
Covid_data2021_2022 %>%
ggplot() + geom_line(aes(date, daily_cases)) +
scale_x_date(breaks = scales::breaks_pretty(8)) +
labs(title = "Daily COVID-19 Cases",
y = "Daily Cases")
Covid_data2021_2022 %>%
ggplot() + geom_line(aes(date, daily_complete_vaccination)) +
scale_x_date(breaks = scales::breaks_pretty(8)) +
labs(title = "Number of People Reaching Full Vaccination Daily")
Covid_data2021_2022 %>%
ggplot() + geom_line(aes(date, cumulative_complete_vaccination)) +
scale_x_date(breaks = scales::breaks_pretty(8)) +
labs(title = "Cumulative Number of Individuals Reaching Full Vaccination",
y= "Number of Individuals")
Covid_data2021_2022 %>% select(date,daily_complete_vaccination) %>%
mutate(day = row_number()) %>% lm(daily_complete_vaccination ~ poly(day,3,raw = T),data =.) %>% summary()
Covid_data2021_2022 %>%
mutate(daily_complete_vaccination = ifelse(daily_complete_vaccination <= 0,
yes = 0,no = daily_complete_vaccination),
daily_cases = ifelse(daily_cases <= 0, 1, daily_cases),
) -> Covid_data2021_2022
Covid_data2021_2022 %>% mutate(day = row_number()) %>%
ggplot(aes(day,daily_complete_vaccination)) +
geom_line() +
geom_smooth(aes(color = "Quartic Trend"),
formula = y~poly(x,4,raw=T),method = "lm",se =F) +
geom_smooth(aes(color = "LOESS"),se = F) +
scale_color_manual(values=c("Quartic Trend" = "red", "LOESS" = "deepskyblue")) +
scale_x_continuous(breaks = scales::breaks_pretty(10))+
labs(title = "Number of People Reaching Full Vaccination Every Day",
color = "Fitted Trend", y = "Number of People",
x = paste("Days Since",date_to_text(Vaccine_start_date), sep = " ")) +
theme(legend.position = "bottom")
Covid_data2021_2022 %>% select(date,daily_complete_vaccination) %>%
mutate(day = row_number()) %>%
lm(daily_complete_vaccination ~ poly(day,4,raw = T),data =.) %>% summary()
table <- ARMA_tables(Covid_data2021_2022$daily_cases,4,4)
table[[1]]
covid_cases = diff(Covid_data2021_2022$daily_cases)
vaccinated = diff(Covid_data2021_2022$daily_complete_vaccination)
arima(covid_cases,xreg=vaccinated,order=c(3,1,2))
log_lik_ratio <- as.numeric(
logLik(arima(covid_cases,xreg=vaccinated,order=c(3,1,2))) -
logLik(arima(covid_cases,order=c(3,1,2)))
)
LRT_pval <- 1-pchisq(2*log_lik_ratio,df=1)
LRT_pval
Covid_cases_ts <- ts(data = Covid_data2021_2022$daily_cases,start = c(2021,4,19), end = c(2022,4,15),deltat = 1/365)
arma_garch = garchFit(~arma(3,2)+garch(1,1),data=Covid_cases_ts,trace=F)
summary(arma_garch)
plot(arma_garch, which = 10)
plot(arma_garch, which = 13)
#Prepare Data for POMP object
Covid_data2021_2022 %>%
transmute(cases = daily_cases,
day = row_number(),
date = date) -> model_data
#From our EDA and https://www.yalemedicine.org/news/5-things-to-know-delta-variant-covid#:~:text=First%20identified%20in%20India%20in,overwhelming%20increase%20in%20hospitalizations%20in
# We assume Delta wave started in July 1 2021
Delta_variant_start_date <- ymd("2021-Jul-1")
#From EDA and https://www.cdc.gov/coronavirus/2019-ncov/variants/omicron-variant.html#:~:text=Emergence%20of%20Omicron&text=November%2024%2C%202021%3A%20A%20new,14%2C%202021%20in%20South%20Africa
#We assume Omnicron wave started in December 1 2021
Omnicron_variant_start_date <- ymd("2021-12-1")
#Convert dates to days corresponding in our model
Delta_variant_start_day <- model_data %>%
dplyr::filter(date == Delta_variant_start_date) %>% summarize(day = day) %>% as.numeric()
Omnicron_variant_start_day <- model_data %>%
dplyr::filter(date == Omnicron_variant_start_date) %>% summarize(day = day) %>% as.numeric()
#https://www.census.gov/quickfacts/fact/table/US/PST045221
#Use US Population
initial_N <- round(331449281 * (1+ 0.005)) # 2020 April Census Estimate w/ 0.5% population growth
#Using the number of cases from last two weeks initialize Q
initial_Q <- NYT_Covid_Case_Data %>%
dplyr::filter(date > (Vaccine_start_date - weeks(2)),
date <= Vaccine_start_date) %>%
summarize(cases = sum(daily_cases)) %>%
as.numeric()
last_week_cases <- NYT_Covid_Case_Data %>%
dplyr::filter(date > (Vaccine_start_date - weeks(1)),
date <= Vaccine_start_date) %>%
summarize(cases = sum(daily_cases)) %>%
as.numeric()
# Use the deaths since 2021 to initialize
initial_D <- NYT_Covid_Case_Data %>%
dplyr::filter(date >= ymd("2021-01-01"),
date <= Vaccine_start_date) %>%
summarize(deaths = sum(daily_deaths)) %>%
as.numeric()
# Use difference between deaths and cases from past year to set up recovered
initial_R <- NYT_Covid_Case_Data %>%
dplyr::filter(date >= (Vaccine_start_date-months(6)),
date <= Vaccine_start_date) %>%
summarize(recovered_last_year = sum(daily_cases)-sum(daily_deaths)) %>%
as.numeric()
#Use total number of people vaccinated to determine # of vaxxed
initial_V <- CDC_Vaccine_Data %>%
dplyr::filter(date == Vaccine_start_date) %>%
summarize(vaccinated = cumulative_complete_vaccination) %>%
as.numeric()
model_step <- Csnippet("
double Beta;
if(intervention == 1) Beta = b1;
else if(intervention == 2) Beta = b2;
else if(intervention == 3) Beta = b3;
double dN_SV = rbinom(S,1-exp(-nu*dt));
double dN_SE = rbinom(S, 1-exp(-1*Beta*(I/N)*dt));
double dN_VE = rbinom(V, 1-exp(-1*Beta*(1-gamma)*(I/N)*dt));
double dN_EI = rbinom(E,1-exp(-mu_EI*dt));
double dN_IQ = rbinom(I,1-exp(-mu_IQ*dt));
double dN_QR = rbinom(Q,1-exp(-kappa*mu_QR*dt));
double dN_QD = rbinom(Q,1-exp(-(1-kappa)*mu_QD*dt));
S -= dN_SE +dN_SV;
V += dN_SV- dN_VE;
E += dN_SE + dN_VE - dN_EI;
I += dN_EI - dN_IQ;
H += dN_IQ;
Q += dN_IQ - dN_QR - dN_QD;
R += dN_QR;
D += dN_QD;
")
#Note: The nearby int in incrementation is for additional safety against getting non-integer values
model_rinit <- Csnippet("
S = nearbyint(N - initial_V - nearbyint(last_week_cases *phi) - nearbyint(last_week_cases * psi) - initial_Q - initial_R - initial_D);
V = nearbyint(initial_V);
E = nearbyint(last_week_cases *phi);
I = nearbyint(last_week_cases * psi);
Q = nearbyint(initial_Q);
R = nearbyint(initial_R);
D = nearbyint(initial_D);
H = nearbyint(0);
")
model_dmeas <- Csnippet("
double tol= 1.0e-10;
double mean =chi*H;
double sd =sqrt(pow(rho*H,2)+chi*H)+tol;
if (cases <= 10*sd || cases >= -10*sd){
if(sd <= 0){
lik = tol;
}
else{
lik = dnorm(cases, mean, sd, 0)+tol;
}
}
else{
lik = tol;
}
if(give_log) lik=log(lik);
")
model_rmeas <- Csnippet("
double tol= 1.0e-10;
double mean =chi*H;
double sd =sqrt(pow(rho*H,2)+chi*H+tol);
cases = rnorm(mean, sd);
if (sd <=0){
cases = 0;
}
if(cases>0.0){
cases = nearbyint(cases);
} else {
cases=0.0;
}
")
model_covar <- covariate_table(
t = model_data$day,
intervention = c(rep(1,Delta_variant_start_day),
rep(2,Omnicron_variant_start_day-Delta_variant_start_day),
rep(3,max(model_data$day)-Omnicron_variant_start_day)),
times = "t")
model_data %>% select(-date) %>%
pomp(times="day",t0=1,
rprocess=euler(model_step,delta.t=1),
rinit=model_rinit,
rmeasure=model_rmeas,
dmeasure=model_dmeas,
accumvars="H",
partrans=parameter_trans(
log=c("b1","b2","b3", "mu_EI","mu_IQ","mu_QR","mu_QD"),
logit=c("nu", "gamma", "kappa","rho","chi","phi","psi")),
statenames=c("S","V","E","I","Q","R","D","H"),
paramnames=c("b1", #first strain
"b2", #delta strain
"b3", #omnicron strain
"nu", #vaccination rate, between 0 and 1
"gamma", #Vaccine efficacy (1-gamma)*Beta for vaccinated infection,between 0 and 1
"mu_EI", #Move from Exposed to Inefcted
"mu_IQ", #Move from Infected to Quarantined
"kappa", #Decides on Death vs Recover between 0 and 1
"mu_QR", #Move from Quarantine to Recovered
"mu_QD", #Move from Quarantine to Death
"rho", #Measurement Model between 0 and 1
"N", #Population
"chi", #Reporting rate between 0 and 1
"initial_V", #fixed initialization param
"last_week_cases",  #fixed initialization param
"phi", #Variable, decide on how many exposed at start, between 0 and upper bound
"psi",#Variable, decide on how many infected at start, between 0 and upper bound
"initial_Q", #fixed initialization param
"initial_R", #fixed initialization param
"initial_D" #fixed initialization param
),
covar = model_covar,
cdir=".", cfile="model") -> model
parameters_guess = params=c(
b1=0.3,
b2=1,
b3=2.75,
nu = 0.15,
gamma = 0.7,
mu_EI = 0.25,
mu_IQ = 0.2,
kappa = 0.9,
mu_QR = 0.07,
mu_QD = 0.07,
rho = 0.7,
chi = 0.9,
N = initial_N,
initial_V = initial_V,
last_week_cases = last_week_cases,
phi = 0.2,
psi = 0.5,
initial_Q = initial_Q,
initial_R = initial_R,
initial_D = initial_D)
model %>%
simulate(
params=parameters_guess,
nsim=20,format="data.frame",include.data=TRUE
) -> sims
sims %>%
ggplot()+
geom_line(aes(x=day,y=cases,group=.id,color=.id=="data"),alpha = 0.45) +
guides(color= "none")
# The POMP maximum likelihood local search optimization
num_cores <- detectCores()-2
registerDoParallel(cores=num_cores)
run_level = 1
if (num_cores >= 8){
run_level = 3
}
Num_Particales = switch(run_level, 50, 100, 500) # number of particles
Num_Mifs = switch(run_level, 5, 100, 200) # number of filtering iterations - small
Num_Reps = switch(run_level, 5, 20, 40) # number of replications in likelihood evaluation
Num_Start = switch(run_level, 50, 500, 800) # number of starting points in the global search
Num_Sim = switch(run_level, 50, 100, 500) # number of simulations
# set the random walk parameters
covid_cooling.fraction.50 <- 0.5
covid_rw.sd <- rw.sd(
b1=0.01,
b2 = 0.01,
b3=0.01,
nu=0.01,
gamma=0.01,
mu_EI=0.01,
mu_IQ=0.01,
kappa=0.01,
mu_QR=0.01,
mu_QD=0.01,
rho = 0.01,
chi = 0.01,
phi = ivp(0.01),
psi = ivp(0.01)
)
bake(file="lik_local.rds",{
foreach(i=1:8,.combine=c) %dopar% {
library(pomp)
library(tidyverse)
mif2(model,
params = parameters_guess,
Np=Num_Particales,
Nmif=Num_Mifs,
cooling.fraction.50=covid_cooling.fraction.50,
rw.sd=covid_rw.sd)
} -> mifs_local
mifs_local
}) -> mifs_local
coefs_local <- coef(mifs_local)
max_coefs_local <- coefs_local[,which.max(logLik(mifs_local))]
max_coefs_local
bake(file="local_results.rds",{
foreach(mf=mifs_local, .combine=rbind) %dopar% {
library(pomp)
library(tidyverse)
evals <- replicate(5,logLik(pfilter(mf,Np=Num_Particales)))
ll <- logmeanexp(evals,se=TRUE)
mf %>% coef() %>% bind_rows() %>%
bind_cols(loglik=ll[1],loglik.se=ll[2])
} -> local_results
local_results
}) -> local_results
local_results
# The paris plot results from the local search
mifs_local %>%
traces() %>%
melt() %>%
ggplot(aes(x=iteration,y=value,group=L1,color=factor(L1)))+
geom_line()+
guides(color=FALSE)+
facet_wrap(~variable,scales="free_y")
local_cache = local_results[is.finite(local_results$loglik),]
local_cache = local_cache[local_cache$loglik.se < .5,]
best_local_results = arrange(local_cache,-loglik)
head(as.data.frame(best_local_results),5)
model %>%
simulate(
params=unlist(best_local_results[1,]),
nsim=Num_Sim,format="data.frame",include.data=TRUE
) -> sims
sims %>%
ggplot(aes(x=day,y=cases,group=.id,color=.id=="data"))+
geom_line(alpha = ifelse(sims$.id == 'data', 1, .3), lwd = 1)+
guides(color=FALSE) + theme_bw()
pairs(~loglik+b1+b2+nu+gamma+mu_EI+mu_IQ+kappa+mu_QR+mu_QD+rho+chi+phi+psi,data = best_local_results, pch=16, col='red' )
# method from project 13
covid_box <- rbind(
b1=c(0,0.8),
b2=c(0,2),
b3=c(0,4),
nu=c(0,0.4),
N=initial_N,
initial_V=initial_V,
last_week_cases = last_week_cases,
initial_Q = initial_Q,
initial_R = initial_R,
initial_D = initial_D,
gamma=c(0.5,0.95),
mu_EI=c(0,0.8),
mu_IQ=c(0,0.5),
kappa=c(0.75,1),
mu_QR=c(0,0.2),
mu_QD=c(0,0.1),
rho=c(0.6,0.9),
chi=c(0.8,1),
phi=c(0.15,0.3),
psi=c(0.45,0.6)
)
bake(file="mifs_global.rds",{
foreach(i=1:num_cores,.combine=c,.errorhandling='remove') %dopar% {
library(pomp)
library(tidyverse)
mif2(model,
params = c(apply(covid_box,1,function(x)runif(1,x[1],x[2]))),
Np=Num_Particales,
Nmif=Num_Mifs,
cooling.fraction.50=covid_cooling.fraction.50,
rw.sd=covid_rw.sd)
} -> mifs_global
mifs_global
}) -> mifs_global
# method from project 13
bake(file="global_search.rds",{
foreach(mf=mifs_global, .combine=rbind,.errorhandling='remove') %dopar% {
library(pomp)
library(tidyverse)
evals <- replicate(Num_Reps,logLik(pfilter(mf,Np=Num_Particales)))
ll <- logmeanexp(evals,se=TRUE)
mf %>% coef() %>% bind_rows() %>%
bind_cols(loglik=ll[1],loglik.se=ll[2])
} -> global_results
global_results
}) -> global_results
# The best global search had the following coefficients and log likelihood and simulated results:
global_cache = global_results[is.finite(global_results$loglik),]
global_cache = global_cache[global_cache$loglik.se < .5,]
best_global_results = arrange(global_cache,-loglik)
head(as.data.frame(best_global_results),5)
model %>%
simulate(
params=unlist(best_global_results[1,]),
nsim=Num_Sim,format="data.frame",include.data=TRUE
) -> sims
sims %>%
ggplot(aes(x=day,y=cases,group=.id,color=.id=="data"))+
geom_line(alpha = ifelse(sims$.id == 'data', 1, .3), lwd = 1)+
guides(color=FALSE) + theme_bw()
df = bind_rows(global_results,local_results)
cache = df[is.finite(df$loglik),]
cache = cache[cache$loglik.se < .5,]
max_num = max(cache$loglik)
cache$loglik>(max_num-30)
temp = cache[cache$loglik>(max_num-30),]
pairs(~loglik+b1+b2+nu+gamma+mu_EI+mu_IQ+kappa+mu_QR+mu_QD+rho+chi+phi+psi,data = temp, pch=16, col="red")
Vaccine_start_date %>% date_to_text()
nrow(Covid_data2021_2022)
Vaccine_start_date
Last_Pull %>% date_to_text()
Covid_data2021_2022 %>% select(date,daily_complete_vaccination) %>%
mutate(day = row_number()) %>% lm(daily_complete_vaccination ~ poly(day,3,raw = T),data =.) %>% summary()
Covid_data2021_2022 %>%
mutate(daily_complete_vaccination = ifelse(daily_complete_vaccination <= 0,
yes = 0,no = daily_complete_vaccination),
daily_cases = ifelse(daily_cases <= 0, 1, daily_cases),
) -> Covid_data2021_2022
Covid_data2021_2022 %>% mutate(day = row_number()) %>%
ggplot(aes(day,daily_complete_vaccination)) +
geom_line() +
geom_smooth(aes(color = "Quartic Trend"),
formula = y~poly(x,4,raw=T),method = "lm",se =F) +
geom_smooth(aes(color = "LOESS"),se = F) +
scale_color_manual(values=c("Quartic Trend" = "red", "LOESS" = "deepskyblue")) +
scale_x_continuous(breaks = scales::breaks_pretty(10))+
labs(title = "Number of People Reaching Full Vaccination Every Day",
color = "Fitted Trend", y = "Number of People",
x = paste("Days Since",date_to_text(Vaccine_start_date), sep = " ")) +
theme(legend.position = "bottom")
Covid_data2021_2022 %>% select(date,daily_complete_vaccination) %>%
mutate(day = row_number()) %>%
lm(daily_complete_vaccination ~ poly(day,4,raw = T),data =.) %>% summary()
Covid_data2021_2022 %>% mutate(day = row_number()) %>%
ggplot(aes(day,daily_complete_vaccination)) +
geom_line() +
geom_smooth(aes(color = "Quartic Trend"),
formula = y~poly(x,4,raw=T),method = "lm",se =F) +
geom_smooth(aes(color = "LOESS"),se = F) +
scale_color_manual(values=c("Quartic Trend" = "red", "LOESS" = "deepskyblue")) +
scale_x_continuous(breaks = scales::breaks_pretty(10))+
labs(title = "Number of People Reaching Full Vaccination Every Day",
color = "Fitted Trend", y = "Number of People",
x = paste("Days Since",date_to_text(Vaccine_start_date), sep = " ")) +
theme(legend.position = "bottom")
Covid_data2021_2022 %>% select(date,daily_complete_vaccination) %>%
mutate(day = row_number()) %>%
lm(daily_complete_vaccination ~ poly(day,4,raw = T),data =.) %>% summary()
